type Client {
  id: ID
  lastTimestamp: Int
}

type Bios {
  vendor: String
  version: String
  releaseDate: String
  revision: String
}

type BaseBoard {
  manufacturer: String
  model: String
  version: String
  serial: String
  assetTag: String
}

type System {
  manufacturer: String
  model: String
  version: String
  serial: String
  uuid: String
  sku: String
}

type OperatingSystem {
  platform: String
  distro: String
  release: String
  codename: String
  kernel: String
  arch: String
  hostname: String
  logofile: String
}

type CPU {
  manufacturer: String
  brand: String
  vendor: String
  family: String
  model: String
  stepping: String
  revision: String
  voltage: String
  speed: String
  speedmin: String
  speedmax: String
  core: Int
}

type Controller {
  id: ID
  timestamp: Int
  vendor: String
  model: String
  bus: String
  vram: Int
  vramDynamic: Int
}

type Display {
  id: ID
  timestamp: Int
  connection: String
  main: Boolean
  builtin: Boolean
  model: String
  resolutionx: Int
  resolutiony: Int
  sizex: Int
  sizey: Int
  pixeldepth: Int
}

type NetworkInterface {
  id: ID
  timestamp: Int
  iface: String
  ip4: String
  ip6: String
  mac: String
  internal: Boolean
}

type Time {
  id: ID
  timestamp: Int
  current: Int
  uptime: Int
  timezone: String
  timezoneName: String
}

type CPUSpeed {
  id: ID
  timestamp: Int
  min: Int
  max: Int
  avg: Int
}

type CPULoad {
  id: ID
  timestamp: Int
  avgload: Float
  currentload: Float
  currentload_user: Float
  currentload_system: Float
  currentload_nice: Float
  currentload_idle: Float
  currentload_irq: Float
  raw_currentload: Float
  raw_currentload_user: Float
  raw_currentload_system: Float
  raw_currentload_nice: Float
  raw_currentload_idle: Float
  raw_currentload_irq: Float
}

type FileSystem {
  id: ID
  timestamp: Int
  fs: String
  type: String
  size: String
  used: String
  use: Float
  mount: String
}

type Memory {
  id: ID
  timestamp: Int
  total: String
  free: String
  used: String
  use: Float
  active: String
  available: String
  buffcache: String
  swaptotal: String
  swapused: String
  swappercent: String
  swapfree: String
}

type NetworkConnection {
  id: ID
  timestamp: Int
  protocol: String
  localaddress: String
  localport: String
  peeraddress: String
  peerport: String
  state: String
}

type User {
  id: ID
  timestamp: Int
  user: String
  tty: String
  date: String
  time: String
  ip: String
  command: String
}

type Process {
  id: ID
  timestamp: Int
  pid: Int
  name: String
  pcpu: String
  pcpuu: String
  pcpus: String
  pmem: String
  priority: Int
  mem_vsz: String
  mem_rss: String
  nice: Int
  started: String
  state: String
  tty: String
  user: String
  command: String
}

type Battery {
  id: ID
  timestamp: Int
  hasbattery: Boolean
  cyclecount: Int
  ischarging: Boolean
  maxcapacity: Int
  currentcapacity: Int
  percent: Int
  timeremaining: Int
  acconnected: Boolean
  type: String
  model: String
  manufacturer: String
  serial: String
}

type Payload {
  system: System
  bios: Bios
  baseboard: BaseBoard
  os: OperatingSystem
  cpu: CPU
  displays: [Display]
  controllers: [Controller]
  networkInterfaces: [NetworkInterface]
  time: Time
  cpuSpeed: [CPUSpeed]
  cpuLoad: [CPULoad]
  fs: [FileSystem]
  memory: Memory
  networkConnections: [NetworkConnection]
  users: [User]
  battery: Battery
  processes: [Process]
}

type Query {
  getAllClients: [Client]!
  getAllData(id: ID!): Payload!
}

type Subscription {
  jsonAdded: String
}

type Mutation{
  register(email: String!, password: String!): Boolean
}